name: Deploy model
inputs:
- {name: model, type: Model}
- {name: project, type: String}
- {name: region, type: String}
- {name: model_display_name, type: String}
- {name: endpoint_name, type: String}
- {name: machine_type, type: String}
- {name: serving_container_image_uri, type: String}
outputs:
- {name: vertex_endpoint, type: Artifact}
- {name: vertex_model, type: Model}
implementation:
  container:
    image: us-central1-docker.pkg.dev/continual-dev/azure-vm-rf/vertex-azure-vm-rf-dbt@sha256:c41e3ab3122bb9e5f371adc004463692740c3c6680894725cf81d0aaa64de57c
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'scikit-learn' 'kfp==1.8.14' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef deploy_model(\n    model: Input[Model],\n    project: str,\n\
      \    region: str,\n    model_display_name: str,\n    endpoint_name: str,\n \
      \   machine_type: str, \n    serving_container_image_uri: str,\n    vertex_endpoint:\
      \ Output[Artifact],\n    vertex_model: Output[Model]\n):\n    from google.cloud\
      \ import aiplatform\n    aiplatform.init(project=project, location=region)\n\
      \n    # display_name = model_display_name\n    # model_name = display_name +\
      \ \"-rf\"\n\n    def create_endpoint():\n        endpoints = aiplatform.Endpoint.list(\n\
      \        filter='display_name=\"{}\"'.format(endpoint_name),\n        order_by='create_time\
      \ desc',\n        project=project, \n        location=region,\n        )\n \
      \       if len(endpoints) > 0:\n            endpoint = endpoints[0]  # most\
      \ recently created\n        else:\n            endpoint = aiplatform.Endpoint.create(\n\
      \            display_name=endpoint_name, project=project, location=region\n\
      \        )\n    endpoint = create_endpoint()   \n\n\n    #Import a model programmatically\n\
      \    model_upload = aiplatform.Model.upload(\n        display_name = model_display_name,\
      \ \n        artifact_uri = model.uri.replace(\"/model\", \"/\"),\n        serving_container_image_uri\
      \ =  serving_container_image_uri,\n        serving_container_health_route=f\"\
      /v1/models/{model_display_name}\",\n        serving_container_predict_route=f\"\
      /v1/models/{model_display_name}:predict\",\n        serving_container_environment_variables={\n\
      \        \"MODEL_NAME\": model_display_name,\n    },       \n    )\n    model_deploy\
      \ = model_upload.deploy(\n        machine_type=machine_type, \n        endpoint=endpoint,\n\
      \        traffic_split={\"0\": 100},\n        deployed_model_display_name=model_display_name,\n\
      \    )\n\n    # Save data to the output params\n    vertex_model.uri = model_deploy.resource_name\n\
      \n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - deploy_model
